#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Structure to represent an edge
struct Edge {
    int src, dest, weight;
};

// Structure to represent a subset for Union-Find
struct Subset {
    int parent, rank;
};

// Find the parent of a vertex (with path compression)
int findParent(vector<Subset>& subsets, int vertex) {
    if (subsets[vertex].parent != vertex) {
        subsets[vertex].parent = findParent(subsets, subsets[vertex].parent);
    }
    return subsets[vertex].parent;
}

// Union of two subsets (by rank)
void unionSubsets(vector<Subset>& subsets, int x, int y) {
    int xroot = findParent(subsets, x);
    int yroot = findParent(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank) {
        subsets[xroot].parent = yroot;
    } else if (subsets[xroot].rank > subsets[yroot].rank) {
        subsets[yroot].parent = xroot;
    } else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

// Comparator function to sort edges by weight
bool compareEdges(const Edge& e1, const Edge& e2) {
    return e1.weight < e2.weight;
}

// Function to find the Minimum Spanning Tree (MST) using Kruskal's algorithm
void kruskalsMST(vector<Edge>& edges, int V) {
    // Sort the edges in ascending order of their weights
    sort(edges.begin(), edges.end(), compareEdges);

    // Vector to store the edges in the MST
    vector<Edge> mst;

    // Create V subsets for Union-Find
    vector<Subset> subsets(V);
    for (int i = 0; i < V; i++) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }

    // Number of edges added to the MST
    int edgeCount = 0;

    // Index variable for iterating over edges
    int i = 0;

    while (edgeCount < V - 1 && i < edges.size()) {
        // Get the next edge in the sorted order
        Edge nextEdge = edges[i++];

        // Find the parent vertices of the edge's source and destination
        int srcParent = findParent(subsets, nextEdge.src);
        int destParent = findParent(subsets, nextEdge.dest);

        // If including the edge doesn't form a cycle, add it to the MST
        if (srcParent != destParent) {
            mst.push_back(nextEdge);
            unionSubsets(subsets, srcParent, destParent);
            edgeCount++;
        }
    }

    // Print the Minimum Spanning Tree (MST)
    cout << "Minimum Spanning Tree (MST):" << endl;
    for (auto edge : mst) {
        cout << edge.src << " - " << edge.dest << " : " << edge.weight << endl;
    }
}

// Driver program
int main() {
    int V, E;
    cout << "Enter the number of vertices in the graph: ";
    cin >> V;
    cout << "Enter the number of edges in the graph: ";
    cin >> E;

    vector<Edge> edges(E);

    cout << "Enter the edges (src, dest, weight):" << endl;
    for (int i = 0; i < E; i++) {
        cin >> edges[i].src >> edges[i].dest >> edges[i].weight;
    }

    kruskalsMST(edges, V);

    return 0;
}


*/input:

Enter the number of vertices in the graph: 5
Enter the number of edges in the graph: 7
Enter the edges (src, dest, weight):
0 1 2
0 3 6
1 2 3
1 3 8
1 4 5
2 4 7
3 4 9


output:

Minimum Spanning Tree (MST):
0 - 1 : 2
1 - 2 : 3
1 - 4 : 5
0 - 3 : 6


/*